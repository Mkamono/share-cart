on:
  workflow_dispatch:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    paths:
      - "api/docs/atlas/**"
      - ".github/workflows/atlas-plan.yaml"

jobs:
  plan:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: api
    permissions:
      contents: "read"
      id-token: "write"
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{secrets.WIF_PROVIDER_NAME}}
          service_account: ${{secrets.WIF_SA_EMAIL}}
      - name: Install Task
        uses: arduino/setup-task@v2
      - name: Download and install Atlas CLI
        run: |
          curl -sSf https://atlasgo.sh | sh -s -- -y
      - name: task plan
        id: plan
        run: |
          POSTGRES_USER="$(gcloud secrets versions access latest --secret='supabase_user')"
          POSTGRES_PASSWORD="$(gcloud secrets versions access latest --secret='supabase_password')"
          POSTGRES_DB="$(gcloud secrets versions access latest --secret='supabase_db_dev')"
          POSTGRES_HOST="$(gcloud secrets versions access latest --secret='supabase_host')"
          POSTGRES_PORT="$(gcloud secrets versions access latest --secret='supabase_port')"
          export POSTGRES_USER
          export POSTGRES_PASSWORD
          export POSTGRES_DB
          export POSTGRES_HOST
          export POSTGRES_PORT
          task plan
      - name: print result
        run: |
          echo "${{ steps.plan.outputs }}"
          echo "${{ steps.plan.outcome }}"
          echo "${{ steps.plan.outputs.stdout }}"
          echo "${{ steps.plan.outputs.stderr }}"
          echo "${{ steps.plan.outputs.exitcode }}"
          echo "${{ steps.plan.outputs.time }}"

      # - uses: actions/github-script@v7
      #   if: github.event_name == 'pull_request'
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const output = `## Atlas Plan ðŸ“–\`${{ steps.plan.outcome }}\`

      #       <details><summary>Show Plan</summary>

      #       \`\`\`\n
      #       ${{ steps.plan.outputs.stdout }}
      #       test
      #       \`\`\`

      #       </details>

      #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`infra/terraform/remote\`, Workflow: \`${{ github.workflow }}\`*`;

      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })
