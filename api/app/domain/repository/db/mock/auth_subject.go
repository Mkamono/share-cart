// Code generated by MockGen. DO NOT EDIT.
// Source: app/domain/repository/db/auth_subject.go
//
// Generated by this command:
//
//	mockgen -source=app/domain/repository/db/auth_subject.go -destination=app/domain/repository/db/mock/auth_subject.go
//

// Package mock_db is a generated GoMock package.
package mock_db

import (
	db "api/app/domain/entity/db"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthSubjectRepository is a mock of AuthSubjectRepository interface.
type MockAuthSubjectRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthSubjectRepositoryMockRecorder
}

// MockAuthSubjectRepositoryMockRecorder is the mock recorder for MockAuthSubjectRepository.
type MockAuthSubjectRepositoryMockRecorder struct {
	mock *MockAuthSubjectRepository
}

// NewMockAuthSubjectRepository creates a new mock instance.
func NewMockAuthSubjectRepository(ctrl *gomock.Controller) *MockAuthSubjectRepository {
	mock := &MockAuthSubjectRepository{ctrl: ctrl}
	mock.recorder = &MockAuthSubjectRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthSubjectRepository) EXPECT() *MockAuthSubjectRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAuthSubjectRepository) Create(ctx context.Context, user *db.AuthSubject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAuthSubjectRepositoryMockRecorder) Create(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuthSubjectRepository)(nil).Create), ctx, user)
}
