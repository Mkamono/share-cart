// Code generated by MockGen. DO NOT EDIT.
// Source: app/domain/repository/db/market.go
//
// Generated by this command:
//
//	mockgen -source=app/domain/repository/db/market.go -destination=app/domain/repository/db/mock/market.go
//

// Package mock_db is a generated GoMock package.
package mock_db

import (
	db "api/app/domain/entity/db"
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockMarketRepository is a mock of MarketRepository interface.
type MockMarketRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMarketRepositoryMockRecorder
}

// MockMarketRepositoryMockRecorder is the mock recorder for MockMarketRepository.
type MockMarketRepositoryMockRecorder struct {
	mock *MockMarketRepository
}

// NewMockMarketRepository creates a new mock instance.
func NewMockMarketRepository(ctrl *gomock.Controller) *MockMarketRepository {
	mock := &MockMarketRepository{ctrl: ctrl}
	mock.recorder = &MockMarketRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarketRepository) EXPECT() *MockMarketRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMarketRepository) Create(ctx context.Context, market *db.Market) (*db.Market, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, market)
	ret0, _ := ret[0].(*db.Market)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMarketRepositoryMockRecorder) Create(ctx, market any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMarketRepository)(nil).Create), ctx, market)
}

// DeleteByID mocks base method.
func (m *MockMarketRepository) DeleteByID(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockMarketRepositoryMockRecorder) DeleteByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockMarketRepository)(nil).DeleteByID), ctx, id)
}

// GetAll mocks base method.
func (m *MockMarketRepository) GetAll(ctx context.Context) ([]*db.Market, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*db.Market)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockMarketRepositoryMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMarketRepository)(nil).GetAll), ctx)
}

// GetByID mocks base method.
func (m *MockMarketRepository) GetByID(ctx context.Context, id uuid.UUID) (*db.Market, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*db.Market)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockMarketRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMarketRepository)(nil).GetByID), ctx, id)
}
