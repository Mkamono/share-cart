// Code generated by MockGen. DO NOT EDIT.
// Source: app/domain/repository/db/market_image.go
//
// Generated by this command:
//
//	mockgen -source=app/domain/repository/db/market_image.go -destination=app/domain/repository/db/mock/market_image.go
//

// Package mock_db is a generated GoMock package.
package mock_db

import (
	db "api/app/domain/entity/db"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMarketImageRepository is a mock of MarketImageRepository interface.
type MockMarketImageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMarketImageRepositoryMockRecorder
}

// MockMarketImageRepositoryMockRecorder is the mock recorder for MockMarketImageRepository.
type MockMarketImageRepositoryMockRecorder struct {
	mock *MockMarketImageRepository
}

// NewMockMarketImageRepository creates a new mock instance.
func NewMockMarketImageRepository(ctrl *gomock.Controller) *MockMarketImageRepository {
	mock := &MockMarketImageRepository{ctrl: ctrl}
	mock.recorder = &MockMarketImageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarketImageRepository) EXPECT() *MockMarketImageRepositoryMockRecorder {
	return m.recorder
}

// DeleteByMarketID mocks base method.
func (m *MockMarketImageRepository) DeleteByMarketID(ctx context.Context, marketID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByMarketID", ctx, marketID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByMarketID indicates an expected call of DeleteByMarketID.
func (mr *MockMarketImageRepositoryMockRecorder) DeleteByMarketID(ctx, marketID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByMarketID", reflect.TypeOf((*MockMarketImageRepository)(nil).DeleteByMarketID), ctx, marketID)
}

// GetAllByMarketIDs mocks base method.
func (m *MockMarketImageRepository) GetAllByMarketIDs(ctx context.Context, marketIDs []string) ([]*db.MarketImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByMarketIDs", ctx, marketIDs)
	ret0, _ := ret[0].([]*db.MarketImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByMarketIDs indicates an expected call of GetAllByMarketIDs.
func (mr *MockMarketImageRepositoryMockRecorder) GetAllByMarketIDs(ctx, marketIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByMarketIDs", reflect.TypeOf((*MockMarketImageRepository)(nil).GetAllByMarketIDs), ctx, marketIDs)
}
