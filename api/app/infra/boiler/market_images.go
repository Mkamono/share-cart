// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MarketImage is an object representing the database table.
type MarketImage struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	MarketID  string    `boil:"market_id" json:"market_id" toml:"market_id" yaml:"market_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	ImageID   string    `boil:"image_id" json:"image_id" toml:"image_id" yaml:"image_id"`

	R *marketImageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L marketImageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MarketImageColumns = struct {
	ID        string
	MarketID  string
	CreatedAt string
	UpdatedAt string
	ImageID   string
}{
	ID:        "id",
	MarketID:  "market_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	ImageID:   "image_id",
}

var MarketImageTableColumns = struct {
	ID        string
	MarketID  string
	CreatedAt string
	UpdatedAt string
	ImageID   string
}{
	ID:        "market_images.id",
	MarketID:  "market_images.market_id",
	CreatedAt: "market_images.created_at",
	UpdatedAt: "market_images.updated_at",
	ImageID:   "market_images.image_id",
}

// Generated where

var MarketImageWhere = struct {
	ID        whereHelperstring
	MarketID  whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	ImageID   whereHelperstring
}{
	ID:        whereHelperstring{field: "\"market_images\".\"id\""},
	MarketID:  whereHelperstring{field: "\"market_images\".\"market_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"market_images\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"market_images\".\"updated_at\""},
	ImageID:   whereHelperstring{field: "\"market_images\".\"image_id\""},
}

// MarketImageRels is where relationship names are stored.
var MarketImageRels = struct {
	Market string
}{
	Market: "Market",
}

// marketImageR is where relationships are stored.
type marketImageR struct {
	Market *Market `boil:"Market" json:"Market" toml:"Market" yaml:"Market"`
}

// NewStruct creates a new relationship struct
func (*marketImageR) NewStruct() *marketImageR {
	return &marketImageR{}
}

func (r *marketImageR) GetMarket() *Market {
	if r == nil {
		return nil
	}
	return r.Market
}

// marketImageL is where Load methods for each relationship are stored.
type marketImageL struct{}

var (
	marketImageAllColumns            = []string{"id", "market_id", "created_at", "updated_at", "image_id"}
	marketImageColumnsWithoutDefault = []string{"id", "market_id", "created_at", "updated_at", "image_id"}
	marketImageColumnsWithDefault    = []string{}
	marketImagePrimaryKeyColumns     = []string{"id"}
	marketImageGeneratedColumns      = []string{}
)

type (
	// MarketImageSlice is an alias for a slice of pointers to MarketImage.
	// This should almost always be used instead of []MarketImage.
	MarketImageSlice []*MarketImage
	// MarketImageHook is the signature for custom MarketImage hook methods
	MarketImageHook func(context.Context, boil.ContextExecutor, *MarketImage) error

	marketImageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	marketImageType                 = reflect.TypeOf(&MarketImage{})
	marketImageMapping              = queries.MakeStructMapping(marketImageType)
	marketImagePrimaryKeyMapping, _ = queries.BindMapping(marketImageType, marketImageMapping, marketImagePrimaryKeyColumns)
	marketImageInsertCacheMut       sync.RWMutex
	marketImageInsertCache          = make(map[string]insertCache)
	marketImageUpdateCacheMut       sync.RWMutex
	marketImageUpdateCache          = make(map[string]updateCache)
	marketImageUpsertCacheMut       sync.RWMutex
	marketImageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var marketImageAfterSelectMu sync.Mutex
var marketImageAfterSelectHooks []MarketImageHook

var marketImageBeforeInsertMu sync.Mutex
var marketImageBeforeInsertHooks []MarketImageHook
var marketImageAfterInsertMu sync.Mutex
var marketImageAfterInsertHooks []MarketImageHook

var marketImageBeforeUpdateMu sync.Mutex
var marketImageBeforeUpdateHooks []MarketImageHook
var marketImageAfterUpdateMu sync.Mutex
var marketImageAfterUpdateHooks []MarketImageHook

var marketImageBeforeDeleteMu sync.Mutex
var marketImageBeforeDeleteHooks []MarketImageHook
var marketImageAfterDeleteMu sync.Mutex
var marketImageAfterDeleteHooks []MarketImageHook

var marketImageBeforeUpsertMu sync.Mutex
var marketImageBeforeUpsertHooks []MarketImageHook
var marketImageAfterUpsertMu sync.Mutex
var marketImageAfterUpsertHooks []MarketImageHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MarketImage) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketImageAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MarketImage) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketImageBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MarketImage) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketImageAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MarketImage) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketImageBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MarketImage) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketImageAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MarketImage) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketImageBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MarketImage) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketImageAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MarketImage) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketImageBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MarketImage) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketImageAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMarketImageHook registers your hook function for all future operations.
func AddMarketImageHook(hookPoint boil.HookPoint, marketImageHook MarketImageHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		marketImageAfterSelectMu.Lock()
		marketImageAfterSelectHooks = append(marketImageAfterSelectHooks, marketImageHook)
		marketImageAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		marketImageBeforeInsertMu.Lock()
		marketImageBeforeInsertHooks = append(marketImageBeforeInsertHooks, marketImageHook)
		marketImageBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		marketImageAfterInsertMu.Lock()
		marketImageAfterInsertHooks = append(marketImageAfterInsertHooks, marketImageHook)
		marketImageAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		marketImageBeforeUpdateMu.Lock()
		marketImageBeforeUpdateHooks = append(marketImageBeforeUpdateHooks, marketImageHook)
		marketImageBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		marketImageAfterUpdateMu.Lock()
		marketImageAfterUpdateHooks = append(marketImageAfterUpdateHooks, marketImageHook)
		marketImageAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		marketImageBeforeDeleteMu.Lock()
		marketImageBeforeDeleteHooks = append(marketImageBeforeDeleteHooks, marketImageHook)
		marketImageBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		marketImageAfterDeleteMu.Lock()
		marketImageAfterDeleteHooks = append(marketImageAfterDeleteHooks, marketImageHook)
		marketImageAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		marketImageBeforeUpsertMu.Lock()
		marketImageBeforeUpsertHooks = append(marketImageBeforeUpsertHooks, marketImageHook)
		marketImageBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		marketImageAfterUpsertMu.Lock()
		marketImageAfterUpsertHooks = append(marketImageAfterUpsertHooks, marketImageHook)
		marketImageAfterUpsertMu.Unlock()
	}
}

// One returns a single marketImage record from the query.
func (q marketImageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MarketImage, error) {
	o := &MarketImage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for market_images")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MarketImage records from the query.
func (q marketImageQuery) All(ctx context.Context, exec boil.ContextExecutor) (MarketImageSlice, error) {
	var o []*MarketImage

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to MarketImage slice")
	}

	if len(marketImageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MarketImage records in the query.
func (q marketImageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count market_images rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q marketImageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if market_images exists")
	}

	return count > 0, nil
}

// Market pointed to by the foreign key.
func (o *MarketImage) Market(mods ...qm.QueryMod) marketQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MarketID),
	}

	queryMods = append(queryMods, mods...)

	return Markets(queryMods...)
}

// LoadMarket allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (marketImageL) LoadMarket(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMarketImage interface{}, mods queries.Applicator) error {
	var slice []*MarketImage
	var object *MarketImage

	if singular {
		var ok bool
		object, ok = maybeMarketImage.(*MarketImage)
		if !ok {
			object = new(MarketImage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMarketImage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMarketImage))
			}
		}
	} else {
		s, ok := maybeMarketImage.(*[]*MarketImage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMarketImage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMarketImage))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &marketImageR{}
		}
		args[object.MarketID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &marketImageR{}
			}

			args[obj.MarketID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`markets`),
		qm.WhereIn(`markets.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Market")
	}

	var resultSlice []*Market
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Market")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for markets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for markets")
	}

	if len(marketAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Market = foreign
		if foreign.R == nil {
			foreign.R = &marketR{}
		}
		foreign.R.MarketImages = append(foreign.R.MarketImages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MarketID == foreign.ID {
				local.R.Market = foreign
				if foreign.R == nil {
					foreign.R = &marketR{}
				}
				foreign.R.MarketImages = append(foreign.R.MarketImages, local)
				break
			}
		}
	}

	return nil
}

// SetMarket of the marketImage to the related item.
// Sets o.R.Market to related.
// Adds o to related.R.MarketImages.
func (o *MarketImage) SetMarket(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Market) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"market_images\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"market_id"}),
		strmangle.WhereClause("\"", "\"", 2, marketImagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MarketID = related.ID
	if o.R == nil {
		o.R = &marketImageR{
			Market: related,
		}
	} else {
		o.R.Market = related
	}

	if related.R == nil {
		related.R = &marketR{
			MarketImages: MarketImageSlice{o},
		}
	} else {
		related.R.MarketImages = append(related.R.MarketImages, o)
	}

	return nil
}

// MarketImages retrieves all the records using an executor.
func MarketImages(mods ...qm.QueryMod) marketImageQuery {
	mods = append(mods, qm.From("\"market_images\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"market_images\".*"})
	}

	return marketImageQuery{q}
}

// FindMarketImage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMarketImage(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*MarketImage, error) {
	marketImageObj := &MarketImage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"market_images\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, marketImageObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from market_images")
	}

	if err = marketImageObj.doAfterSelectHooks(ctx, exec); err != nil {
		return marketImageObj, err
	}

	return marketImageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MarketImage) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no market_images provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(marketImageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	marketImageInsertCacheMut.RLock()
	cache, cached := marketImageInsertCache[key]
	marketImageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			marketImageAllColumns,
			marketImageColumnsWithDefault,
			marketImageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(marketImageType, marketImageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(marketImageType, marketImageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"market_images\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"market_images\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into market_images")
	}

	if !cached {
		marketImageInsertCacheMut.Lock()
		marketImageInsertCache[key] = cache
		marketImageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MarketImage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MarketImage) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	marketImageUpdateCacheMut.RLock()
	cache, cached := marketImageUpdateCache[key]
	marketImageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			marketImageAllColumns,
			marketImagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update market_images, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"market_images\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, marketImagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(marketImageType, marketImageMapping, append(wl, marketImagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update market_images row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for market_images")
	}

	if !cached {
		marketImageUpdateCacheMut.Lock()
		marketImageUpdateCache[key] = cache
		marketImageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q marketImageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for market_images")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for market_images")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MarketImageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), marketImagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"market_images\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, marketImagePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in marketImage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all marketImage")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MarketImage) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("boiler: no market_images provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(marketImageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	marketImageUpsertCacheMut.RLock()
	cache, cached := marketImageUpsertCache[key]
	marketImageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			marketImageAllColumns,
			marketImageColumnsWithDefault,
			marketImageColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			marketImageAllColumns,
			marketImagePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert market_images, could not build update column list")
		}

		ret := strmangle.SetComplement(marketImageAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(marketImagePrimaryKeyColumns) == 0 {
				return errors.New("boiler: unable to upsert market_images, could not build conflict column list")
			}

			conflict = make([]string, len(marketImagePrimaryKeyColumns))
			copy(conflict, marketImagePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"market_images\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(marketImageType, marketImageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(marketImageType, marketImageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert market_images")
	}

	if !cached {
		marketImageUpsertCacheMut.Lock()
		marketImageUpsertCache[key] = cache
		marketImageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MarketImage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MarketImage) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no MarketImage provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), marketImagePrimaryKeyMapping)
	sql := "DELETE FROM \"market_images\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from market_images")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for market_images")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q marketImageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no marketImageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from market_images")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for market_images")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MarketImageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(marketImageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), marketImagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"market_images\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, marketImagePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from marketImage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for market_images")
	}

	if len(marketImageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MarketImage) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMarketImage(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MarketImageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MarketImageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), marketImagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"market_images\".* FROM \"market_images\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, marketImagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in MarketImageSlice")
	}

	*o = slice

	return nil
}

// MarketImageExists checks if the MarketImage row exists.
func MarketImageExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"market_images\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if market_images exists")
	}

	return exists, nil
}

// Exists checks if the MarketImage row exists.
func (o *MarketImage) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MarketImageExists(ctx, exec, o.ID)
}
