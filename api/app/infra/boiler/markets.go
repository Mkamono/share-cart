// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Market is an object representing the database table.
type Market struct {
	ID          int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Description string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Name        string    `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *marketR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L marketL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MarketColumns = struct {
	ID          string
	Description string
	CreatedAt   string
	UpdatedAt   string
	Name        string
}{
	ID:          "id",
	Description: "description",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	Name:        "name",
}

var MarketTableColumns = struct {
	ID          string
	Description string
	CreatedAt   string
	UpdatedAt   string
	Name        string
}{
	ID:          "markets.id",
	Description: "markets.description",
	CreatedAt:   "markets.created_at",
	UpdatedAt:   "markets.updated_at",
	Name:        "markets.name",
}

// Generated where

var MarketWhere = struct {
	ID          whereHelperint
	Description whereHelperstring
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
	Name        whereHelperstring
}{
	ID:          whereHelperint{field: "\"markets\".\"id\""},
	Description: whereHelperstring{field: "\"markets\".\"description\""},
	CreatedAt:   whereHelpertime_Time{field: "\"markets\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"markets\".\"updated_at\""},
	Name:        whereHelperstring{field: "\"markets\".\"name\""},
}

// MarketRels is where relationship names are stored.
var MarketRels = struct {
	Items string
}{
	Items: "Items",
}

// marketR is where relationships are stored.
type marketR struct {
	Items ItemSlice `boil:"Items" json:"Items" toml:"Items" yaml:"Items"`
}

// NewStruct creates a new relationship struct
func (*marketR) NewStruct() *marketR {
	return &marketR{}
}

func (r *marketR) GetItems() ItemSlice {
	if r == nil {
		return nil
	}
	return r.Items
}

// marketL is where Load methods for each relationship are stored.
type marketL struct{}

var (
	marketAllColumns            = []string{"id", "description", "created_at", "updated_at", "name"}
	marketColumnsWithoutDefault = []string{"description", "created_at", "updated_at", "name"}
	marketColumnsWithDefault    = []string{"id"}
	marketPrimaryKeyColumns     = []string{"id"}
	marketGeneratedColumns      = []string{"id"}
)

type (
	// MarketSlice is an alias for a slice of pointers to Market.
	// This should almost always be used instead of []Market.
	MarketSlice []*Market
	// MarketHook is the signature for custom Market hook methods
	MarketHook func(context.Context, boil.ContextExecutor, *Market) error

	marketQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	marketType                 = reflect.TypeOf(&Market{})
	marketMapping              = queries.MakeStructMapping(marketType)
	marketPrimaryKeyMapping, _ = queries.BindMapping(marketType, marketMapping, marketPrimaryKeyColumns)
	marketInsertCacheMut       sync.RWMutex
	marketInsertCache          = make(map[string]insertCache)
	marketUpdateCacheMut       sync.RWMutex
	marketUpdateCache          = make(map[string]updateCache)
	marketUpsertCacheMut       sync.RWMutex
	marketUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var marketAfterSelectMu sync.Mutex
var marketAfterSelectHooks []MarketHook

var marketBeforeInsertMu sync.Mutex
var marketBeforeInsertHooks []MarketHook
var marketAfterInsertMu sync.Mutex
var marketAfterInsertHooks []MarketHook

var marketBeforeUpdateMu sync.Mutex
var marketBeforeUpdateHooks []MarketHook
var marketAfterUpdateMu sync.Mutex
var marketAfterUpdateHooks []MarketHook

var marketBeforeDeleteMu sync.Mutex
var marketBeforeDeleteHooks []MarketHook
var marketAfterDeleteMu sync.Mutex
var marketAfterDeleteHooks []MarketHook

var marketBeforeUpsertMu sync.Mutex
var marketBeforeUpsertHooks []MarketHook
var marketAfterUpsertMu sync.Mutex
var marketAfterUpsertHooks []MarketHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Market) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Market) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Market) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Market) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Market) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Market) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Market) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Market) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Market) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMarketHook registers your hook function for all future operations.
func AddMarketHook(hookPoint boil.HookPoint, marketHook MarketHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		marketAfterSelectMu.Lock()
		marketAfterSelectHooks = append(marketAfterSelectHooks, marketHook)
		marketAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		marketBeforeInsertMu.Lock()
		marketBeforeInsertHooks = append(marketBeforeInsertHooks, marketHook)
		marketBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		marketAfterInsertMu.Lock()
		marketAfterInsertHooks = append(marketAfterInsertHooks, marketHook)
		marketAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		marketBeforeUpdateMu.Lock()
		marketBeforeUpdateHooks = append(marketBeforeUpdateHooks, marketHook)
		marketBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		marketAfterUpdateMu.Lock()
		marketAfterUpdateHooks = append(marketAfterUpdateHooks, marketHook)
		marketAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		marketBeforeDeleteMu.Lock()
		marketBeforeDeleteHooks = append(marketBeforeDeleteHooks, marketHook)
		marketBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		marketAfterDeleteMu.Lock()
		marketAfterDeleteHooks = append(marketAfterDeleteHooks, marketHook)
		marketAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		marketBeforeUpsertMu.Lock()
		marketBeforeUpsertHooks = append(marketBeforeUpsertHooks, marketHook)
		marketBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		marketAfterUpsertMu.Lock()
		marketAfterUpsertHooks = append(marketAfterUpsertHooks, marketHook)
		marketAfterUpsertMu.Unlock()
	}
}

// One returns a single market record from the query.
func (q marketQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Market, error) {
	o := &Market{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for markets")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Market records from the query.
func (q marketQuery) All(ctx context.Context, exec boil.ContextExecutor) (MarketSlice, error) {
	var o []*Market

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Market slice")
	}

	if len(marketAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Market records in the query.
func (q marketQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count markets rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q marketQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if markets exists")
	}

	return count > 0, nil
}

// Items retrieves all the item's Items with an executor.
func (o *Market) Items(mods ...qm.QueryMod) itemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"items\".\"market_id\"=?", o.ID),
	)

	return Items(queryMods...)
}

// LoadItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (marketL) LoadItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMarket interface{}, mods queries.Applicator) error {
	var slice []*Market
	var object *Market

	if singular {
		var ok bool
		object, ok = maybeMarket.(*Market)
		if !ok {
			object = new(Market)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMarket)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMarket))
			}
		}
	} else {
		s, ok := maybeMarket.(*[]*Market)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMarket)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMarket))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &marketR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &marketR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`items`),
		qm.WhereIn(`items.market_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load items")
	}

	var resultSlice []*Item
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for items")
	}

	if len(itemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Items = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &itemR{}
			}
			foreign.R.Market = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MarketID {
				local.R.Items = append(local.R.Items, foreign)
				if foreign.R == nil {
					foreign.R = &itemR{}
				}
				foreign.R.Market = local
				break
			}
		}
	}

	return nil
}

// AddItems adds the given related objects to the existing relationships
// of the market, optionally inserting them as new records.
// Appends related to o.R.Items.
// Sets related.R.Market appropriately.
func (o *Market) AddItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Item) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MarketID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"market_id"}),
				strmangle.WhereClause("\"", "\"", 2, itemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MarketID = o.ID
		}
	}

	if o.R == nil {
		o.R = &marketR{
			Items: related,
		}
	} else {
		o.R.Items = append(o.R.Items, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &itemR{
				Market: o,
			}
		} else {
			rel.R.Market = o
		}
	}
	return nil
}

// Markets retrieves all the records using an executor.
func Markets(mods ...qm.QueryMod) marketQuery {
	mods = append(mods, qm.From("\"markets\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"markets\".*"})
	}

	return marketQuery{q}
}

// FindMarket retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMarket(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Market, error) {
	marketObj := &Market{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"markets\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, marketObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from markets")
	}

	if err = marketObj.doAfterSelectHooks(ctx, exec); err != nil {
		return marketObj, err
	}

	return marketObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Market) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no markets provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(marketColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	marketInsertCacheMut.RLock()
	cache, cached := marketInsertCache[key]
	marketInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			marketAllColumns,
			marketColumnsWithDefault,
			marketColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, marketGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(marketType, marketMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(marketType, marketMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"markets\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"markets\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into markets")
	}

	if !cached {
		marketInsertCacheMut.Lock()
		marketInsertCache[key] = cache
		marketInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Market.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Market) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	marketUpdateCacheMut.RLock()
	cache, cached := marketUpdateCache[key]
	marketUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			marketAllColumns,
			marketPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, marketGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update markets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"markets\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, marketPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(marketType, marketMapping, append(wl, marketPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update markets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for markets")
	}

	if !cached {
		marketUpdateCacheMut.Lock()
		marketUpdateCache[key] = cache
		marketUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q marketQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for markets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for markets")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MarketSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), marketPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"markets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, marketPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in market slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all market")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Market) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("boiler: no markets provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(marketColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	marketUpsertCacheMut.RLock()
	cache, cached := marketUpsertCache[key]
	marketUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			marketAllColumns,
			marketColumnsWithDefault,
			marketColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			marketAllColumns,
			marketPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, marketGeneratedColumns)
		update = strmangle.SetComplement(update, marketGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert markets, could not build update column list")
		}

		ret := strmangle.SetComplement(marketAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(marketPrimaryKeyColumns) == 0 {
				return errors.New("boiler: unable to upsert markets, could not build conflict column list")
			}

			conflict = make([]string, len(marketPrimaryKeyColumns))
			copy(conflict, marketPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"markets\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(marketType, marketMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(marketType, marketMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert markets")
	}

	if !cached {
		marketUpsertCacheMut.Lock()
		marketUpsertCache[key] = cache
		marketUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Market record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Market) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Market provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), marketPrimaryKeyMapping)
	sql := "DELETE FROM \"markets\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from markets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for markets")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q marketQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no marketQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from markets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for markets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MarketSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(marketBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), marketPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"markets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, marketPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from market slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for markets")
	}

	if len(marketAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Market) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMarket(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MarketSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MarketSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), marketPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"markets\".* FROM \"markets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, marketPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in MarketSlice")
	}

	*o = slice

	return nil
}

// MarketExists checks if the Market row exists.
func MarketExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"markets\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if markets exists")
	}

	return exists, nil
}

// Exists checks if the Market row exists.
func (o *Market) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MarketExists(ctx, exec, o.ID)
}
