// Code generated by ogen, DO NOT EDIT.

package oas

type DefaultSuccess struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *DefaultSuccess) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *DefaultSuccess) SetMessage(val string) {
	s.Message = val
}

func (*DefaultSuccess) signUpPostRes() {}
func (*DefaultSuccess) testGetRes()    {}

type MarketGetOKApplicationJSON []MarketGetOKItem

func (*MarketGetOKApplicationJSON) marketGetRes() {}

type MarketGetOKItem struct {
	ID          int    `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

// GetID returns the value of ID.
func (s *MarketGetOKItem) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *MarketGetOKItem) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *MarketGetOKItem) GetDescription() string {
	return s.Description
}

// SetID sets the value of ID.
func (s *MarketGetOKItem) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *MarketGetOKItem) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *MarketGetOKItem) SetDescription(val string) {
	s.Description = val
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type R401UnauthorizedError struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *R401UnauthorizedError) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *R401UnauthorizedError) SetMessage(val string) {
	s.Message = val
}

func (*R401UnauthorizedError) signUpPostRes() {}

type R500InternalServerError struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *R500InternalServerError) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *R500InternalServerError) SetMessage(val string) {
	s.Message = val
}

func (*R500InternalServerError) marketGetRes()  {}
func (*R500InternalServerError) signUpPostRes() {}
func (*R500InternalServerError) testGetRes()    {}

type SignUpPostReq struct {
	Name OptString `json:"name"`
}

// GetName returns the value of Name.
func (s *SignUpPostReq) GetName() OptString {
	return s.Name
}

// SetName sets the value of Name.
func (s *SignUpPostReq) SetName(val OptString) {
	s.Name = val
}
