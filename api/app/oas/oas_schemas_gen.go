// Code generated by ogen, DO NOT EDIT.

package oas

type LoginPostDef struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *LoginPostDef) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *LoginPostDef) SetMessage(val OptString) {
	s.Message = val
}

// LoginPostDefStatusCode wraps LoginPostDef with StatusCode.
type LoginPostDefStatusCode struct {
	StatusCode int
	Response   LoginPostDef
}

// GetStatusCode returns the value of StatusCode.
func (s *LoginPostDefStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *LoginPostDefStatusCode) GetResponse() LoginPostDef {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *LoginPostDefStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *LoginPostDefStatusCode) SetResponse(val LoginPostDef) {
	s.Response = val
}

func (*LoginPostDefStatusCode) loginPostRes() {}

type LoginPostOK struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *LoginPostOK) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *LoginPostOK) SetMessage(val OptString) {
	s.Message = val
}

func (*LoginPostOK) loginPostRes() {}

type LoginPostReq struct {
	Name OptString `json:"name"`
}

// GetName returns the value of Name.
func (s *LoginPostReq) GetName() OptString {
	return s.Name
}

// SetName sets the value of Name.
func (s *LoginPostReq) SetName(val OptString) {
	s.Name = val
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type TestGetDef struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *TestGetDef) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *TestGetDef) SetMessage(val OptString) {
	s.Message = val
}

// TestGetDefStatusCode wraps TestGetDef with StatusCode.
type TestGetDefStatusCode struct {
	StatusCode int
	Response   TestGetDef
}

// GetStatusCode returns the value of StatusCode.
func (s *TestGetDefStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *TestGetDefStatusCode) GetResponse() TestGetDef {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *TestGetDefStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *TestGetDefStatusCode) SetResponse(val TestGetDef) {
	s.Response = val
}

func (*TestGetDefStatusCode) testGetRes() {}

type TestGetOK struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *TestGetOK) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *TestGetOK) SetMessage(val OptString) {
	s.Message = val
}

func (*TestGetOK) testGetRes() {}
